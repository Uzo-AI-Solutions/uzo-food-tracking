openapi: 3.1.0
info:
  description: Uzo Food Tracking API - Simplified for Custom GPT
  title: Uzo Food Tracking API
  version: 13.0.4
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
servers:
  - url: https://amehiertzqtbtcjhugql.supabase.co/rest/v1
    description: Supabase REST API (production)
x-user-id: 43af6e15-1b3d-4634-be91-d59cf414a33e
security:
  - apiKeyAuth: []
paths:
  /weekly_analytics_cache:
    get:
      operationId: getWeeklyAnalyticsCache
      parameters:
        - name: user_id
          in: query
          required: true
          description: "Filter by user ID to get data for the specific user. Always use: eq.43af6e15-1b3d-4634-be91-d59cf414a33e"
          schema:
            type: string
            enum:
              - eq.43af6e15-1b3d-4634-be91-d59cf414a33e
          example: eq.43af6e15-1b3d-4634-be91-d59cf414a33e
        - name: week_start
          in: query
          required: false
          schema:
            type: string
            format: date
        - name: select
          in: query
          required: false
          schema:
            type: string
        - name: limit
          in: query
          required: false
          schema:
            type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/weekly_analytics_cache"
      tags:
        - Analytics
      security:
        - apiKeyAuth: []
  /daily_analytics_cache:
    get:
      operationId: getDailyAnalyticsCache
      parameters:
        - name: user_id
          in: query
          required: true
          description: "Filter by user ID to get data for the specific user. Always use: eq.43af6e15-1b3d-4634-be91-d59cf414a33e"
          schema:
            type: string
            enum:
              - eq.43af6e15-1b3d-4634-be91-d59cf414a33e
          example: eq.43af6e15-1b3d-4634-be91-d59cf414a33e
        - name: date
          in: query
          required: false
          schema:
            type: string
            format: date
        - name: select
          in: query
          required: false
          schema:
            type: string
        - name: limit
          in: query
          required: false
          schema:
            type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/daily_analytics_cache"
      tags:
        - Analytics
      security:
        - apiKeyAuth: []
  /monthly_analytics_cache:
    get:
      operationId: getMonthlyAnalyticsCache
      parameters:
        - name: user_id
          in: query
          required: true
          description: "Filter by user ID to get data for the specific user. Always use: eq.43af6e15-1b3d-4634-be91-d59cf414a33e"
          schema:
            type: string
            enum:
              - eq.43af6e15-1b3d-4634-be91-d59cf414a33e
          example: eq.43af6e15-1b3d-4634-be91-d59cf414a33e
        - name: month_start
          in: query
          required: false
          schema:
            type: string
            format: date
        - name: select
          in: query
          required: false
          schema:
            type: string
        - name: limit
          in: query
          required: false
          schema:
            type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/monthly_analytics_cache"
      tags:
        - Analytics
      security:
        - apiKeyAuth: []
  /meal_logs:
    get:
      operationId: getMealLogs
      summary: Get meal logs with search capabilities
      description: Retrieves meal logs with search support. Use search_vector for full-text search (fts.chicken&vegetables),
        meal_name/notes for pattern matching (ilike.*pattern*), and standard filters for exact matches.
      parameters:
        - name: user_id
          in: query
          required: true
          description: "Filter by user ID to get data for the specific user. Always use: eq.43af6e15-1b3d-4634-be91-d59cf414a33e"
          schema:
            type: string
            enum:
              - eq.43af6e15-1b3d-4634-be91-d59cf414a33e
          example: eq.43af6e15-1b3d-4634-be91-d59cf414a33e
        - name: eaten_on
          in: query
          required: false
          schema:
            type: string
            format: date
        - name: meal_name
          in: query
          required: false
          description: Search meal names with exact match or pattern matching
          schema:
            type: string
          examples:
            exact_match:
              summary: Exact match
              value: "eq.Greek Yogurt Bowl"
              description: "Find meals with exact name 'Greek Yogurt Bowl'. Query: ?meal_name=eq.Greek Yogurt Bowl"
            fuzzy_search:
              summary: Fuzzy search
              value: "ilike.*chicken*"
              description: "Find meal names containing 'chicken' (case-insensitive). Query: ?meal_name=ilike.*chicken*"
            starts_with:
              summary: Starts with
              value: "ilike.Breakfast*"
              description: "Find meals starting with 'Breakfast'. Query: ?meal_name=ilike.Breakfast*"
        - name: search_vector
          in: query
          required: false
          description: Full-text search across meal content (meal_name, notes, items). Supports AND (&), OR (|), NOT (!) operators to help with semantic searches
          schema:
            type: string
          examples:
            and_search:
              summary: AND search
              value: "fts.chicken&vegetables"
              description: "Find meals containing both 'chicken' AND 'vegetables'. Query: ?search_vector=fts.chicken&vegetables"
            or_search:
              summary: OR search
              value: "fts.breakfast|lunch"
              description: "Find meals containing 'breakfast' OR 'lunch'. Query: ?search_vector=fts.breakfast|lunch"
            not_search:
              summary: NOT search
              value: "fts.chicken&!fried"
              description: "Find chicken meals that are NOT fried. Query: ?search_vector=fts.chicken&!fried"
        - name: notes
          in: query
          required: false
          description: Search in meal notes with pattern matching
          schema:
            type: string
          examples:
            contains:
              summary: Contains text
              value: "ilike.*dinner*"
              description: "Find meals with notes containing 'dinner'. Query: ?notes=ilike.*dinner*"
            healthy_meals:
              summary: Healthy meals
              value: "ilike.*healthy*"
              description: "Find meals with 'healthy' in notes. Query: ?notes=ilike.*healthy*"
            not_empty:
              summary: Has notes
              value: "not.is.null"
              description: "Find meals that have notes (not empty). Query: ?notes=not.is.null"
        - name: select
          in: query
          required: false
          schema:
            type: string
        - name: limit
          in: query
          required: false
          schema:
            type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/meal_logs"
      tags:
        - Meal Logs
      security:
        - apiKeyAuth: []
    post:
      operationId: createMealLog
      summary: Create a new meal log
      description: Inserts a new meal log entry. Requires meal_name, items array, eaten_on date, and macros object with
        nutrition data.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/meal_logs"
            examples:
              minimalMealLog:
                summary: Minimal meal log
                description: Smallest recommended payload to create a meal log entry
                value:
                  meal_name: Greek Yogurt Bowl
                  items:
                    - 1 cup plain Greek yogurt
                    - 1/2 cup blueberries
                  macros:
                    calories: 210
                    protein: 20
                    carbs: 18
                    fat: 7
                  eaten_on: 2025-01-15
                  user_id: 43af6e15-1b3d-4634-be91-d59cf414a33e
              fullMealLog:
                summary: Full meal log with rating and notes
                description: Includes optional fields commonly captured by the app
                value:
                  meal_name: Spicy Chicken Stir Fry
                  items:
                    - 8 oz chicken breast
                    - 1 cup mixed vegetables
                    - 1 tbsp soy sauce
                  notes: Weeknight dinner, lots of veggies
                  rating: 4.5
                  macros:
                    calories: 520
                    protein: 55
                    carbs: 32
                    fat: 18
                  eaten_on: 2025-01-14
                  user_id: 43af6e15-1b3d-4634-be91-d59cf414a33e
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/meal_logs"
      tags:
        - Meal Logs
      security:
        - apiKeyAuth: []
    patch:
      operationId: updateMealLog
      summary: Update a meal log
      description: Updates an existing meal log entry. Include only the fields you want to update.
      parameters:
        - name: Prefer
          in: header
          required: false
          description: Ask PostgREST to return changed rows.
          schema:
            type: string
            example: return=representation
        - name: id
          in: query
          required: true
          description: PostgREST filter syntax, e.g. id=eq.123
          schema:
            type: string
          example: eq.123
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/meal_logs_update"
            examples:
              updateRating:
                summary: Update meal rating
                description: Update just the rating for a meal
                value:
                  rating: 5
              updateMacros:
                summary: Update macros
                description: Update nutrition information for a meal
                value:
                  macros:
                    calories: 550
                    protein: 60
                    carbs: 35
                    fat: 20
              fullUpdate:
                summary: Full meal update
                description: Update multiple fields including notes and rating
                value:
                  meal_name: Updated Chicken Stir Fry
                  notes: Added extra vegetables, very filling
                  rating: 4.8
                  macros:
                    calories: 580
                    protein: 58
                    carbs: 38
                    fat: 22
      responses:
        "204":
          description: No Content
      tags:
        - Meal Logs
      security:
        - apiKeyAuth: []
  /recipes:
    get:
      operationId: getRecipes
      parameters:
        - name: user_id
          in: query
          required: true
          description: "Filter by user ID to get data for the specific user. Always use: eq.43af6e15-1b3d-4634-be91-d59cf414a33e"
          schema:
            type: string
            enum:
              - eq.43af6e15-1b3d-4634-be91-d59cf414a33e
          example: eq.43af6e15-1b3d-4634-be91-d59cf414a33e
        - name: name
          in: query
          required: false
          schema:
            type: string
        - name: is_favorite
          in: query
          required: false
          schema:
            type: boolean
        - name: select
          in: query
          required: false
          schema:
            type: string
        - name: limit
          in: query
          required: false
          schema:
            type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/recipes"
      tags:
        - Recipes
      security:
        - apiKeyAuth: []
    post:
      operationId: createRecipe
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/recipes"
      responses:
        "201":
          description: Created
      tags:
        - Recipes
      security:
        - apiKeyAuth: []
    patch:
      operationId: updateRecipe
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/recipes"
      responses:
        "204":
          description: No Content
      tags:
        - Recipes
      security:
        - apiKeyAuth: []
  /items:
    get:
      operationId: getItems
      parameters:
        - name: user_id
          in: query
          required: true
          description: "Filter by user ID to get data for the specific user. Always use: eq.43af6e15-1b3d-4634-be91-d59cf414a33e"
          schema:
            type: string
            enum:
              - eq.43af6e15-1b3d-4634-be91-d59cf414a33e
          example: eq.43af6e15-1b3d-4634-be91-d59cf414a33e
        - name: name
          in: query
          required: false
          schema:
            type: string
        - name: category
          in: query
          required: false
          schema:
            type: string
        - name: select
          in: query
          required: false
          schema:
            type: string
        - name: limit
          in: query
          required: false
          schema:
            type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/items"
      tags:
        - Items
      security:
        - apiKeyAuth: []
    post:
      operationId: createItem
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/items"
      responses:
        "201":
          description: Created
      tags:
        - Items
      security:
        - apiKeyAuth: []
    patch:
      operationId: updateItem
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/items"
      responses:
        "204":
          description: No Content
      tags:
        - Items
      security:
        - apiKeyAuth: []
  /rpc/get_analytics_data:
    get:
      operationId: getAnalyticsData
      parameters:
        - name: p_user_id
          in: query
          required: false
          description: User ID parameter for RPC function
          schema:
            type: string
            format: uuid
          example: 43af6e15-1b3d-4634-be91-d59cf414a33e
        - name: p_days_back
          in: query
          required: false
          schema:
            type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/analytics_data"
      tags:
        - Analytics
      security:
        - apiKeyAuth: []
  /rpc/bulk_insert_items:
    post:
      operationId: bulkInsertItems
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                items_data:
                  type: array
                  items:
                    $ref: "#/components/schemas/items"
              required:
                - items_data
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  count:
                    type: integer
      tags:
        - Bulk Operations
      security:
        - apiKeyAuth: []
  /rpc/bulk_insert_recipes:
    post:
      operationId: bulkInsertRecipes
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                recipes_data:
                  type: array
                  items:
                    $ref: "#/components/schemas/recipes"
              required:
                - recipes_data
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  count:
                    type: integer
      tags:
        - Bulk Operations
      security:
        - apiKeyAuth: []
  /rpc/bulk_insert_meal_logs:
    post:
      operationId: bulkInsertMealLogs
      summary: Bulk insert multiple meal logs
      description: Insert multiple meal log entries in a single operation. Each meal log must include meal_name, items,
        macros, and eaten_on.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                meal_logs_data:
                  type: array
                  items:
                    $ref: "#/components/schemas/meal_logs"
              required:
                - meal_logs_data
            example:
              meal_logs_data:
                - meal_name: Breakfast Bowl
                  items:
                    - 1 cup oatmeal
                    - 1/2 cup blueberries
                    - 1 tbsp honey
                  macros:
                    calories: 320
                    protein: 12
                    carbs: 65
                    fat: 6
                  eaten_on: 2025-01-15
                  user_id: 43af6e15-1b3d-4634-be91-d59cf414a33e
                - meal_name: Lunch Salad
                  items:
                    - 2 cups mixed greens
                    - 4 oz grilled chicken
                    - 1/4 cup feta cheese
                  macros:
                    calories: 280
                    protein: 35
                    carbs: 8
                    fat: 12
                  eaten_on: 2025-01-15
                  rating: 4
                  user_id: 43af6e15-1b3d-4634-be91-d59cf414a33e
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  count:
                    type: integer
      tags:
        - Bulk Operations
      security:
        - apiKeyAuth: []
components:
  securitySchemes:
    apiKeyAuth:
      type: apiKey
      in: header
      name: apikey
  schemas:
    weekly_analytics_cache:
      type: object
      properties:
        user_id:
          type: string
          format: uuid
          example: 43af6e15-1b3d-4634-be91-d59cf414a33e
        week_start:
          type: string
          format: date
        avg_calories:
          type: number
        avg_protein:
          type: number
        avg_carbs:
          type: number
        avg_fat:
          type: number
        days_with_data:
          type: integer
        updated_at:
          type: string
          format: date-time
    daily_analytics_cache:
      type: object
      properties:
        user_id:
          type: string
          format: uuid
          example: 43af6e15-1b3d-4634-be91-d59cf414a33e
        date:
          type: string
          format: date
        calories:
          type: number
        protein:
          type: number
        carbs:
          type: number
        fat:
          type: number
        meals_count:
          type: integer
        updated_at:
          type: string
          format: date-time
    monthly_analytics_cache:
      type: object
      properties:
        user_id:
          type: string
          format: uuid
          example: 43af6e15-1b3d-4634-be91-d59cf414a33e
        month_start:
          type: string
          format: date
        avg_calories:
          type: number
        avg_protein:
          type: number
        avg_carbs:
          type: number
        avg_fat:
          type: number
        days_with_data:
          type: integer
        updated_at:
          type: string
          format: date-time
    meal_logs:
      type: object
      required:
        - meal_name
        - items
        - eaten_on
        - macros
        - user_id
      properties:
        id:
          type: integer
        meal_name:
          type: string
          example: Greek Yogurt Bowl
        notes:
          type: string
          example: Weeknight dinner, lots of veggies
        rating:
          type: number
          format: float
          minimum: 0
          maximum: 5
          example: 4.5
        macros:
          type: object
          description: Macronutrient totals for the meal. Keys should be numeric values in grams (except calories).
          properties:
            calories:
              type: integer
              example: 520
            protein:
              type: integer
              example: 45
            carbs:
              type: integer
              example: 50
            fat:
              type: integer
              example: 18
          additionalProperties: false
          example:
            calories: 520
            protein: 45
            carbs: 50
            fat: 18
        created_at:
          type: string
          format: date-time
        items:
          type: array
          description: Free-form list of meal components supplied by the user.
          items:
            type: string
          minItems: 1
          example:
            - 8 oz chicken breast
            - 1 cup mixed vegetables
            - 1 tbsp soy sauce
        eaten_on:
          type: string
          format: date
          example: 2025-01-14
        user_id:
          type: string
          format: uuid
          example: 43af6e15-1b3d-4634-be91-d59cf414a33e
    meal_logs_update:
      type: object
      description: Schema for updating meal logs. All fields are optional for partial updates.
      properties:
        meal_name:
          type: string
          example: Updated Chicken Stir Fry
        notes:
          type: string
          example: Added extra vegetables, very filling
        rating:
          type: number
          format: float
          minimum: 0
          maximum: 5
          example: 4.8
        macros:
          type: object
          description: Macronutrient totals for the meal. Keys should be numeric values in grams (except calories).
          properties:
            calories:
              type: integer
              example: 580
            protein:
              type: integer
              example: 58
            carbs:
              type: integer
              example: 38
            fat:
              type: integer
              example: 22
          additionalProperties: false
        items:
          type: array
          description: Free-form list of meal components supplied by the user.
          items:
            type: string
          minItems: 1
          example:
            - 8 oz chicken breast (updated)
            - 1.5 cups mixed vegetables
            - 1 tbsp soy sauce
        eaten_on:
          type: string
          format: date
          example: 2025-01-14
    recipes:
      type: object
      required:
        - name
      properties:
        id:
          type: integer
        name:
          type: string
        total_time:
          type: integer
        servings:
          type: integer
        instructions:
          type: string
        nutrition_per_serving:
          type: object
        is_favorite:
          type: boolean
          default: false
        source_link:
          type: string
        notes:
          type: string
        times_cooked:
          type: integer
          default: 0
        last_cooked:
          type: string
          format: date-time
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        ingredient_list:
          type: array
          items:
            type: string
        nutrition_source:
          type: string
          default: calculated
        feedback:
          type: array
          items:
            type: object
        user_id:
          type: string
          format: uuid
          example: 43af6e15-1b3d-4634-be91-d59cf414a33e
        tags:
          type: array
          items:
            type: string
    items:
      type: object
      required:
        - name
      properties:
        id:
          type: integer
        name:
          type: string
        brand:
          type: string
        category:
          type: string
        image_url:
          type: string
        ingredients:
          type: string
        purchase_count:
          type: integer
          default: 0
        rating:
          type: integer
        last_edited:
          type: string
          format: date-time
        normalized_name:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        notes:
          type: array
          items:
            type: object
        user_id:
          type: string
          format: uuid
          example: 43af6e15-1b3d-4634-be91-d59cf414a33e
    analytics_data:
      type: object
      properties:
        daily_data:
          type: array
          items:
            type: object
            properties:
              date:
                type: string
                format: date
              calories:
                type: number
              protein:
                type: number
              carbs:
                type: number
              fat:
                type: number
              meals_count:
                type: integer
        weekly_data:
          type: array
          items:
            type: object
            properties:
              week_start:
                type: string
                format: date
              avg_calories:
                type: number
              avg_protein:
                type: number
              avg_carbs:
                type: number
              avg_fat:
                type: number
              days_with_data:
                type: integer
        monthly_data:
          type: array
          items:
            type: object
            properties:
              month_start:
                type: string
                format: date
              avg_calories:
                type: number
              avg_protein:
                type: number
              avg_carbs:
                type: number
              avg_fat:
                type: number
              days_with_data:
                type: integer
